{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to tips for CP4D and OpenShift Here are some docs on tips on installing and managing CP4D and OpenShift. If you have any questions, comments or issues, please send me an email ronan.bourlier@fr.ibm.com Documents Getting external access to Db2 database installed in CP4D on a ROKS VPC Gen2 OpenShift client installation and tips","title":"Home"},{"location":"#welcome-to-tips-for-cp4d-and-openshift","text":"Here are some docs on tips on installing and managing CP4D and OpenShift. If you have any questions, comments or issues, please send me an email ronan.bourlier@fr.ibm.com","title":"Welcome to tips for CP4D and OpenShift"},{"location":"#documents","text":"Getting external access to Db2 database installed in CP4D on a ROKS VPC Gen2 OpenShift client installation and tips","title":"Documents"},{"location":"db2-roks/","text":"View Db2 databases externally from a CP4D installed on ROKS VPC Gen2 A specificity from ROKS VPC Gen2 in IBM Cloud is the security level. The node servers don't have an external IP address and cannot be accessed externally. Once you have installed Db2 in CP4D, the usual way to vie the database externally is by using NodePort access. In our case this is not working since the node cannot be viewed externally. The solution is to use a Load Balancer that needs to be added. Here is the procedure. Log in to Openshift environment and go to your CP4D project. $ oc login -u apikey -p XXXXXXXX --server=https://c100-e.eu-de.containers.cloud.ibm.com:NNNN Login successful. You have access to 69 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"cp4d\". $ oc project cp4d Already on project \"cp4d\" on server \"https://c100-e.eu-de.containers.cloud.ibm.com:NNNNN\" Find the pods for your database. In the Databases > Details page, find the Deployment id. Note down the deployment id as it it will used all along the procedure. In this case db2oltp-1638208426839597 Because a VPC in IBM Cloud is oriented toward security, workers nodes are not visible from outside of its LAN. We cannot use a regular NodePort service. Let's use a LoadBalancer service in this case. Here is the example file apiVersion : v1 kind : Service metadata : name : lb-db2-2 annotations : service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type : \"public\" spec : ports : - name : db protocol : TCP port : 51000 targetPort : 50000 - name : db-ssl protocol : TCP port : 51001 targetPort : 50001 type : LoadBalancer selector : app : db2oltp-1638208426839597 component : db2oltp formation_id : db2oltp-1638208426839597 role : db type : engine Some explanations. - metadata.name : use the name you want. I personaly use lb- followed by the name of my database - ports : ports name are the one you want. I keep it to db and db-ssl to know what it is. I this example I create 2 ports in my load balancer forwarding to internal database port. The external port 51000 forwards to the non SSL 50000 database port. the external port 51001 forwards to the SSL 50001 database port. - selector: app and formation_id point to the deployment id we noted down earlier. Once your file configured and saved as lb-db2.yaml , let's use it. $ oc create -f db2-lb.yaml service/lb-db2-2 created $ oc get svc lb-db2-2 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE lb-db2-2 LoadBalancer 172.21.100.200 <pending> 51000:32149/TCP,51001:32514/TCP 17s This command will trigger the creation of a Load Balancer in VPC Once the load balancer is created, you get all information in the command line. $ oc get svc lb-db2-2 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE lb-db2-2 LoadBalancer 172.21.100.200 fbec480d-eu-de.lb.appdomain.cloud 51000:32149/TCP,51001:32514/TCP 21m With this command you get the domain name to connect to your database. In our case fbec480d-eu-de.lb.appdomain.cloud and you can test it. $ nc -zv fbec480d-eu-de.lb.appdomain.cloud 51000 Connection to fbec480d-eu-de.lb.appdomain.cloud (158.177.15.62) 51000 port [tcp/*] succeeded! $ nc -zv fbec480d-eu-de.lb.appdomain.cloud 51001 Connection to fbec480d-eu-de.lb.appdomain.cloud (158.177.15.62) 51001 port [tcp/*] succeeded! This is the best solution for now and I am still trying to find an easier solution since this one needs to be done for each database created that need an external access. Connexion from a IDE Here is an example of a connexion through an IDE. I use DBeaver. More details If you need more details on the load balancer, you can find it in the VPC load balancer","title":"Db2 on ROKS Gen2"},{"location":"db2-roks/#view-db2-databases-externally-from-a-cp4d-installed-on-roks-vpc-gen2","text":"A specificity from ROKS VPC Gen2 in IBM Cloud is the security level. The node servers don't have an external IP address and cannot be accessed externally. Once you have installed Db2 in CP4D, the usual way to vie the database externally is by using NodePort access. In our case this is not working since the node cannot be viewed externally. The solution is to use a Load Balancer that needs to be added. Here is the procedure. Log in to Openshift environment and go to your CP4D project. $ oc login -u apikey -p XXXXXXXX --server=https://c100-e.eu-de.containers.cloud.ibm.com:NNNN Login successful. You have access to 69 projects, the list has been suppressed. You can list all projects with 'oc projects' Using project \"cp4d\". $ oc project cp4d Already on project \"cp4d\" on server \"https://c100-e.eu-de.containers.cloud.ibm.com:NNNNN\" Find the pods for your database. In the Databases > Details page, find the Deployment id. Note down the deployment id as it it will used all along the procedure. In this case db2oltp-1638208426839597 Because a VPC in IBM Cloud is oriented toward security, workers nodes are not visible from outside of its LAN. We cannot use a regular NodePort service. Let's use a LoadBalancer service in this case. Here is the example file apiVersion : v1 kind : Service metadata : name : lb-db2-2 annotations : service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type : \"public\" spec : ports : - name : db protocol : TCP port : 51000 targetPort : 50000 - name : db-ssl protocol : TCP port : 51001 targetPort : 50001 type : LoadBalancer selector : app : db2oltp-1638208426839597 component : db2oltp formation_id : db2oltp-1638208426839597 role : db type : engine Some explanations. - metadata.name : use the name you want. I personaly use lb- followed by the name of my database - ports : ports name are the one you want. I keep it to db and db-ssl to know what it is. I this example I create 2 ports in my load balancer forwarding to internal database port. The external port 51000 forwards to the non SSL 50000 database port. the external port 51001 forwards to the SSL 50001 database port. - selector: app and formation_id point to the deployment id we noted down earlier. Once your file configured and saved as lb-db2.yaml , let's use it. $ oc create -f db2-lb.yaml service/lb-db2-2 created $ oc get svc lb-db2-2 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE lb-db2-2 LoadBalancer 172.21.100.200 <pending> 51000:32149/TCP,51001:32514/TCP 17s This command will trigger the creation of a Load Balancer in VPC Once the load balancer is created, you get all information in the command line. $ oc get svc lb-db2-2 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE lb-db2-2 LoadBalancer 172.21.100.200 fbec480d-eu-de.lb.appdomain.cloud 51000:32149/TCP,51001:32514/TCP 21m With this command you get the domain name to connect to your database. In our case fbec480d-eu-de.lb.appdomain.cloud and you can test it. $ nc -zv fbec480d-eu-de.lb.appdomain.cloud 51000 Connection to fbec480d-eu-de.lb.appdomain.cloud (158.177.15.62) 51000 port [tcp/*] succeeded! $ nc -zv fbec480d-eu-de.lb.appdomain.cloud 51001 Connection to fbec480d-eu-de.lb.appdomain.cloud (158.177.15.62) 51001 port [tcp/*] succeeded! This is the best solution for now and I am still trying to find an easier solution since this one needs to be done for each database created that need an external access.","title":"View Db2 databases externally from a CP4D installed on ROKS VPC Gen2"},{"location":"db2-roks/#connexion-from-a-ide","text":"Here is an example of a connexion through an IDE. I use DBeaver.","title":"Connexion from a IDE"},{"location":"db2-roks/#more-details","text":"If you need more details on the load balancer, you can find it in the VPC load balancer","title":"More details"},{"location":"oc-client-install/","text":"OpenShift client installation en tips Here are the steps to install the OpenShift client for Linux and some tips ans tricks to manage connexions Install oc client Navigate to the OpenShift Container Platform downloads page on the Red Hat Customer Portal. Select the appropriate version in the Version drop-down menu. Right Click on \"Download Now next to the latest OpenShift Linux Client entry to get the link. Download the client with the link and wget. Don't forget the single quote around the URL to avoind issues. wget 'https://access.cdn.redhat.com/content/origin/files/sha256/28/2895de3bb4a9d9a68aa6e48c06ffaed21f81c7341a78e81fddd7c50eaca08c1b/oc-4.9.21-linux.tar.gz?user=c1223590990cfd8b164b125451ffffff&_auth_=1645565566_0d7edf2fef35f7623fa3dd411c310666' Rename the file for easier management mv oc-4.9.21-linux.tar.gz \\? user \\= c1223590990cfd8b164b125451ffffff \\& _auth_ \\= 1645565566_0d7edf2fef35f7623fa3dd411c310666 oc-4.9.21-linux.tar.gz (NB : I changed the content to vois giing up my user id and auth) Unzip the file tar xvzf oc-4.9.21-linux.tar.gz Place the oc binary in a directory that is on your PATH. sudo mv oc kubectl /usr/local/bin Check that everything is working $ oc version Client Version: 4 .9.21 error: You must be logged in to the server ( Unauthorized ) Source : Red Hat OpenShify documentation bash completion TBD How to log to ROKS OpenShift from CLI ROKS doesn't allow using oc login with username and password to log in in OpenShift. Here is the solution to get a oc login that works all the time without having to go through the Web interface every day.","title":"Openshift Client"},{"location":"oc-client-install/#openshift-client-installation-en-tips","text":"Here are the steps to install the OpenShift client for Linux and some tips ans tricks to manage connexions","title":"OpenShift client installation en tips"},{"location":"oc-client-install/#install-oc-client","text":"Navigate to the OpenShift Container Platform downloads page on the Red Hat Customer Portal. Select the appropriate version in the Version drop-down menu. Right Click on \"Download Now next to the latest OpenShift Linux Client entry to get the link. Download the client with the link and wget. Don't forget the single quote around the URL to avoind issues. wget 'https://access.cdn.redhat.com/content/origin/files/sha256/28/2895de3bb4a9d9a68aa6e48c06ffaed21f81c7341a78e81fddd7c50eaca08c1b/oc-4.9.21-linux.tar.gz?user=c1223590990cfd8b164b125451ffffff&_auth_=1645565566_0d7edf2fef35f7623fa3dd411c310666' Rename the file for easier management mv oc-4.9.21-linux.tar.gz \\? user \\= c1223590990cfd8b164b125451ffffff \\& _auth_ \\= 1645565566_0d7edf2fef35f7623fa3dd411c310666 oc-4.9.21-linux.tar.gz (NB : I changed the content to vois giing up my user id and auth) Unzip the file tar xvzf oc-4.9.21-linux.tar.gz Place the oc binary in a directory that is on your PATH. sudo mv oc kubectl /usr/local/bin Check that everything is working $ oc version Client Version: 4 .9.21 error: You must be logged in to the server ( Unauthorized ) Source : Red Hat OpenShify documentation","title":"Install oc client"},{"location":"oc-client-install/#bash-completion","text":"TBD","title":"bash completion"},{"location":"oc-client-install/#how-to-log-to-roks-openshift-from-cli","text":"ROKS doesn't allow using oc login with username and password to log in in OpenShift. Here is the solution to get a oc login that works all the time without having to go through the Web interface every day.","title":"How to log to ROKS OpenShift from CLI"}]}